// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: admin/admin.proto

package mall

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminApi_CreateProductCategory_FullMethodName            = "/admin.AdminApi/CreateProductCategory"
	AdminApi_UpdateProductCategory_FullMethodName            = "/admin.AdminApi/UpdateProductCategory"
	AdminApi_GetProductCategories_FullMethodName             = "/admin.AdminApi/GetProductCategories"
	AdminApi_GetProductCategory_FullMethodName               = "/admin.AdminApi/GetProductCategory"
	AdminApi_DeleteProductCategory_FullMethodName            = "/admin.AdminApi/DeleteProductCategory"
	AdminApi_GetProductCategoriesWithChildren_FullMethodName = "/admin.AdminApi/GetProductCategoriesWithChildren"
	AdminApi_CreateBrand_FullMethodName                      = "/admin.AdminApi/CreateBrand"
	AdminApi_UpdateBrand_FullMethodName                      = "/admin.AdminApi/UpdateBrand"
	AdminApi_GetBrands_FullMethodName                        = "/admin.AdminApi/GetBrands"
	AdminApi_GetBrand_FullMethodName                         = "/admin.AdminApi/GetBrand"
	AdminApi_DeleteBrand_FullMethodName                      = "/admin.AdminApi/DeleteBrand"
	AdminApi_CreateProductAttributeCategory_FullMethodName   = "/admin.AdminApi/CreateProductAttributeCategory"
	AdminApi_UpdateProductAttributeCategory_FullMethodName   = "/admin.AdminApi/UpdateProductAttributeCategory"
	AdminApi_GetProductAttributeCategories_FullMethodName    = "/admin.AdminApi/GetProductAttributeCategories"
	AdminApi_GetProductAttributeCategory_FullMethodName      = "/admin.AdminApi/GetProductAttributeCategory"
	AdminApi_DeleteProductAttributeCategory_FullMethodName   = "/admin.AdminApi/DeleteProductAttributeCategory"
	AdminApi_CreateProductAttribute_FullMethodName           = "/admin.AdminApi/CreateProductAttribute"
	AdminApi_UpdateProductAttribute_FullMethodName           = "/admin.AdminApi/UpdateProductAttribute"
	AdminApi_GetProductAttributes_FullMethodName             = "/admin.AdminApi/GetProductAttributes"
	AdminApi_GetProductAttribute_FullMethodName              = "/admin.AdminApi/GetProductAttribute"
	AdminApi_DeleteProductAttribute_FullMethodName           = "/admin.AdminApi/DeleteProductAttribute"
	AdminApi_CreateProduct_FullMethodName                    = "/admin.AdminApi/CreateProduct"
	AdminApi_UpdateProduct_FullMethodName                    = "/admin.AdminApi/UpdateProduct"
	AdminApi_GetProducts_FullMethodName                      = "/admin.AdminApi/GetProducts"
	AdminApi_GetProduct_FullMethodName                       = "/admin.AdminApi/GetProduct"
	AdminApi_DeleteProduct_FullMethodName                    = "/admin.AdminApi/DeleteProduct"
	AdminApi_BatchUpdateSkuStock_FullMethodName              = "/admin.AdminApi/BatchUpdateSkuStock"
	AdminApi_GetSkuStocksByProductId_FullMethodName          = "/admin.AdminApi/GetSkuStocksByProductId"
)

// AdminApiClient is the client API for AdminApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminApiClient interface {
	// 添加商品分类
	CreateProductCategory(ctx context.Context, in *AddOrUpdateProductCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改商品分类
	UpdateProductCategory(ctx context.Context, in *AddOrUpdateProductCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询商品分类
	GetProductCategories(ctx context.Context, in *GetProductCategoriesParam, opts ...grpc.CallOption) (*GetProductCategoriesRsp, error)
	// 根据id获取商品分类
	GetProductCategory(ctx context.Context, in *GetProductCategoryReq, opts ...grpc.CallOption) (*GetProductCategoryRsp, error)
	// 删除商品分类
	DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// 查询所有一级分类及子分类
	GetProductCategoriesWithChildren(ctx context.Context, in *GetProductCategoriesWithChildrenReq, opts ...grpc.CallOption) (*GetProductCategoriesWithChildrenRsp, error)
	// 添加商品品牌
	CreateBrand(ctx context.Context, in *AddOrUpdateBrandParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改商品品牌
	UpdateBrand(ctx context.Context, in *AddOrUpdateBrandParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询商品品牌
	GetBrands(ctx context.Context, in *GetBrandsParam, opts ...grpc.CallOption) (*GetBrandsRsp, error)
	// 根据id获取商品品牌
	GetBrand(ctx context.Context, in *GetBrandReq, opts ...grpc.CallOption) (*GetBrandRsp, error)
	// 删除商品品牌
	DeleteBrand(ctx context.Context, in *DeleteBrandReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// 添加产品属性分类
	CreateProductAttributeCategory(ctx context.Context, in *AddOrUpdateProductAttributeCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改产品属性分类
	UpdateProductAttributeCategory(ctx context.Context, in *AddOrUpdateProductAttributeCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询产品属性分类
	GetProductAttributeCategories(ctx context.Context, in *GetProductAttributeCategoriesParam, opts ...grpc.CallOption) (*GetProductAttributeCategoriesRsp, error)
	// 根据id获取产品属性分类
	GetProductAttributeCategory(ctx context.Context, in *GetProductAttributeCategoryReq, opts ...grpc.CallOption) (*GetProductAttributeCategoryRsp, error)
	// 删除产品属性分类
	DeleteProductAttributeCategory(ctx context.Context, in *DeleteProductAttributeCategoryReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// 添加商品属性参数
	CreateProductAttribute(ctx context.Context, in *AddOrUpdateProductAttributeParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改商品属性参数
	UpdateProductAttribute(ctx context.Context, in *AddOrUpdateProductAttributeParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询商品属性参数
	GetProductAttributes(ctx context.Context, in *GetProductAttributesParam, opts ...grpc.CallOption) (*GetProductAttributesRsp, error)
	// 根据id获取商品属性参数
	GetProductAttribute(ctx context.Context, in *GetProductAttributeReq, opts ...grpc.CallOption) (*GetProductAttributeRsp, error)
	// 删除商品属性参数
	DeleteProductAttribute(ctx context.Context, in *DeleteProductAttributeReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// START ======================================= 商品管理 ======================================= START
	// 添加商品
	CreateProduct(ctx context.Context, in *AddOrUpdateProductParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改商品
	UpdateProduct(ctx context.Context, in *AddOrUpdateProductParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询商品
	GetProducts(ctx context.Context, in *GetProductsParam, opts ...grpc.CallOption) (*GetProductsRsp, error)
	// 根据id获取商品
	GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductRsp, error)
	// 删除商品
	DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// START ======================================= sku库存 ======================================= START
	// 批量更新sku的库存
	BatchUpdateSkuStock(ctx context.Context, in *BatchUpdateSkuStockParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询sku的库存
	GetSkuStocksByProductId(ctx context.Context, in *GetSkuStocksByProductIdParam, opts ...grpc.CallOption) (*GetSkuStocksByProductIdRsp, error)
}

type adminApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminApiClient(cc grpc.ClientConnInterface) AdminApiClient {
	return &adminApiClient{cc}
}

func (c *adminApiClient) CreateProductCategory(ctx context.Context, in *AddOrUpdateProductCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_CreateProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) UpdateProductCategory(ctx context.Context, in *AddOrUpdateProductCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_UpdateProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) GetProductCategories(ctx context.Context, in *GetProductCategoriesParam, opts ...grpc.CallOption) (*GetProductCategoriesRsp, error) {
	out := new(GetProductCategoriesRsp)
	err := c.cc.Invoke(ctx, AdminApi_GetProductCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) GetProductCategory(ctx context.Context, in *GetProductCategoryReq, opts ...grpc.CallOption) (*GetProductCategoryRsp, error) {
	out := new(GetProductCategoryRsp)
	err := c.cc.Invoke(ctx, AdminApi_GetProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_DeleteProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) GetProductCategoriesWithChildren(ctx context.Context, in *GetProductCategoriesWithChildrenReq, opts ...grpc.CallOption) (*GetProductCategoriesWithChildrenRsp, error) {
	out := new(GetProductCategoriesWithChildrenRsp)
	err := c.cc.Invoke(ctx, AdminApi_GetProductCategoriesWithChildren_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) CreateBrand(ctx context.Context, in *AddOrUpdateBrandParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_CreateBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) UpdateBrand(ctx context.Context, in *AddOrUpdateBrandParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_UpdateBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) GetBrands(ctx context.Context, in *GetBrandsParam, opts ...grpc.CallOption) (*GetBrandsRsp, error) {
	out := new(GetBrandsRsp)
	err := c.cc.Invoke(ctx, AdminApi_GetBrands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) GetBrand(ctx context.Context, in *GetBrandReq, opts ...grpc.CallOption) (*GetBrandRsp, error) {
	out := new(GetBrandRsp)
	err := c.cc.Invoke(ctx, AdminApi_GetBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) DeleteBrand(ctx context.Context, in *DeleteBrandReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_DeleteBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) CreateProductAttributeCategory(ctx context.Context, in *AddOrUpdateProductAttributeCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_CreateProductAttributeCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) UpdateProductAttributeCategory(ctx context.Context, in *AddOrUpdateProductAttributeCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_UpdateProductAttributeCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) GetProductAttributeCategories(ctx context.Context, in *GetProductAttributeCategoriesParam, opts ...grpc.CallOption) (*GetProductAttributeCategoriesRsp, error) {
	out := new(GetProductAttributeCategoriesRsp)
	err := c.cc.Invoke(ctx, AdminApi_GetProductAttributeCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) GetProductAttributeCategory(ctx context.Context, in *GetProductAttributeCategoryReq, opts ...grpc.CallOption) (*GetProductAttributeCategoryRsp, error) {
	out := new(GetProductAttributeCategoryRsp)
	err := c.cc.Invoke(ctx, AdminApi_GetProductAttributeCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) DeleteProductAttributeCategory(ctx context.Context, in *DeleteProductAttributeCategoryReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_DeleteProductAttributeCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) CreateProductAttribute(ctx context.Context, in *AddOrUpdateProductAttributeParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_CreateProductAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) UpdateProductAttribute(ctx context.Context, in *AddOrUpdateProductAttributeParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_UpdateProductAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) GetProductAttributes(ctx context.Context, in *GetProductAttributesParam, opts ...grpc.CallOption) (*GetProductAttributesRsp, error) {
	out := new(GetProductAttributesRsp)
	err := c.cc.Invoke(ctx, AdminApi_GetProductAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) GetProductAttribute(ctx context.Context, in *GetProductAttributeReq, opts ...grpc.CallOption) (*GetProductAttributeRsp, error) {
	out := new(GetProductAttributeRsp)
	err := c.cc.Invoke(ctx, AdminApi_GetProductAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) DeleteProductAttribute(ctx context.Context, in *DeleteProductAttributeReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_DeleteProductAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) CreateProduct(ctx context.Context, in *AddOrUpdateProductParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_CreateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) UpdateProduct(ctx context.Context, in *AddOrUpdateProductParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_UpdateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) GetProducts(ctx context.Context, in *GetProductsParam, opts ...grpc.CallOption) (*GetProductsRsp, error) {
	out := new(GetProductsRsp)
	err := c.cc.Invoke(ctx, AdminApi_GetProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductRsp, error) {
	out := new(GetProductRsp)
	err := c.cc.Invoke(ctx, AdminApi_GetProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_DeleteProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) BatchUpdateSkuStock(ctx context.Context, in *BatchUpdateSkuStockParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, AdminApi_BatchUpdateSkuStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminApiClient) GetSkuStocksByProductId(ctx context.Context, in *GetSkuStocksByProductIdParam, opts ...grpc.CallOption) (*GetSkuStocksByProductIdRsp, error) {
	out := new(GetSkuStocksByProductIdRsp)
	err := c.cc.Invoke(ctx, AdminApi_GetSkuStocksByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminApiServer is the server API for AdminApi service.
// All implementations must embed UnimplementedAdminApiServer
// for forward compatibility
type AdminApiServer interface {
	// 添加商品分类
	CreateProductCategory(context.Context, *AddOrUpdateProductCategoryParam) (*CommonRsp, error)
	// 修改商品分类
	UpdateProductCategory(context.Context, *AddOrUpdateProductCategoryParam) (*CommonRsp, error)
	// 分页查询商品分类
	GetProductCategories(context.Context, *GetProductCategoriesParam) (*GetProductCategoriesRsp, error)
	// 根据id获取商品分类
	GetProductCategory(context.Context, *GetProductCategoryReq) (*GetProductCategoryRsp, error)
	// 删除商品分类
	DeleteProductCategory(context.Context, *DeleteProductCategoryReq) (*CommonRsp, error)
	// 查询所有一级分类及子分类
	GetProductCategoriesWithChildren(context.Context, *GetProductCategoriesWithChildrenReq) (*GetProductCategoriesWithChildrenRsp, error)
	// 添加商品品牌
	CreateBrand(context.Context, *AddOrUpdateBrandParam) (*CommonRsp, error)
	// 修改商品品牌
	UpdateBrand(context.Context, *AddOrUpdateBrandParam) (*CommonRsp, error)
	// 分页查询商品品牌
	GetBrands(context.Context, *GetBrandsParam) (*GetBrandsRsp, error)
	// 根据id获取商品品牌
	GetBrand(context.Context, *GetBrandReq) (*GetBrandRsp, error)
	// 删除商品品牌
	DeleteBrand(context.Context, *DeleteBrandReq) (*CommonRsp, error)
	// 添加产品属性分类
	CreateProductAttributeCategory(context.Context, *AddOrUpdateProductAttributeCategoryParam) (*CommonRsp, error)
	// 修改产品属性分类
	UpdateProductAttributeCategory(context.Context, *AddOrUpdateProductAttributeCategoryParam) (*CommonRsp, error)
	// 分页查询产品属性分类
	GetProductAttributeCategories(context.Context, *GetProductAttributeCategoriesParam) (*GetProductAttributeCategoriesRsp, error)
	// 根据id获取产品属性分类
	GetProductAttributeCategory(context.Context, *GetProductAttributeCategoryReq) (*GetProductAttributeCategoryRsp, error)
	// 删除产品属性分类
	DeleteProductAttributeCategory(context.Context, *DeleteProductAttributeCategoryReq) (*CommonRsp, error)
	// 添加商品属性参数
	CreateProductAttribute(context.Context, *AddOrUpdateProductAttributeParam) (*CommonRsp, error)
	// 修改商品属性参数
	UpdateProductAttribute(context.Context, *AddOrUpdateProductAttributeParam) (*CommonRsp, error)
	// 分页查询商品属性参数
	GetProductAttributes(context.Context, *GetProductAttributesParam) (*GetProductAttributesRsp, error)
	// 根据id获取商品属性参数
	GetProductAttribute(context.Context, *GetProductAttributeReq) (*GetProductAttributeRsp, error)
	// 删除商品属性参数
	DeleteProductAttribute(context.Context, *DeleteProductAttributeReq) (*CommonRsp, error)
	// START ======================================= 商品管理 ======================================= START
	// 添加商品
	CreateProduct(context.Context, *AddOrUpdateProductParam) (*CommonRsp, error)
	// 修改商品
	UpdateProduct(context.Context, *AddOrUpdateProductParam) (*CommonRsp, error)
	// 分页查询商品
	GetProducts(context.Context, *GetProductsParam) (*GetProductsRsp, error)
	// 根据id获取商品
	GetProduct(context.Context, *GetProductReq) (*GetProductRsp, error)
	// 删除商品
	DeleteProduct(context.Context, *DeleteProductReq) (*CommonRsp, error)
	// START ======================================= sku库存 ======================================= START
	// 批量更新sku的库存
	BatchUpdateSkuStock(context.Context, *BatchUpdateSkuStockParam) (*CommonRsp, error)
	// 分页查询sku的库存
	GetSkuStocksByProductId(context.Context, *GetSkuStocksByProductIdParam) (*GetSkuStocksByProductIdRsp, error)
	mustEmbedUnimplementedAdminApiServer()
}

// UnimplementedAdminApiServer must be embedded to have forward compatible implementations.
type UnimplementedAdminApiServer struct {
}

func (UnimplementedAdminApiServer) CreateProductCategory(context.Context, *AddOrUpdateProductCategoryParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductCategory not implemented")
}
func (UnimplementedAdminApiServer) UpdateProductCategory(context.Context, *AddOrUpdateProductCategoryParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductCategory not implemented")
}
func (UnimplementedAdminApiServer) GetProductCategories(context.Context, *GetProductCategoriesParam) (*GetProductCategoriesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategories not implemented")
}
func (UnimplementedAdminApiServer) GetProductCategory(context.Context, *GetProductCategoryReq) (*GetProductCategoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategory not implemented")
}
func (UnimplementedAdminApiServer) DeleteProductCategory(context.Context, *DeleteProductCategoryReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductCategory not implemented")
}
func (UnimplementedAdminApiServer) GetProductCategoriesWithChildren(context.Context, *GetProductCategoriesWithChildrenReq) (*GetProductCategoriesWithChildrenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategoriesWithChildren not implemented")
}
func (UnimplementedAdminApiServer) CreateBrand(context.Context, *AddOrUpdateBrandParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedAdminApiServer) UpdateBrand(context.Context, *AddOrUpdateBrandParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedAdminApiServer) GetBrands(context.Context, *GetBrandsParam) (*GetBrandsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrands not implemented")
}
func (UnimplementedAdminApiServer) GetBrand(context.Context, *GetBrandReq) (*GetBrandRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrand not implemented")
}
func (UnimplementedAdminApiServer) DeleteBrand(context.Context, *DeleteBrandReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedAdminApiServer) CreateProductAttributeCategory(context.Context, *AddOrUpdateProductAttributeCategoryParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductAttributeCategory not implemented")
}
func (UnimplementedAdminApiServer) UpdateProductAttributeCategory(context.Context, *AddOrUpdateProductAttributeCategoryParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttributeCategory not implemented")
}
func (UnimplementedAdminApiServer) GetProductAttributeCategories(context.Context, *GetProductAttributeCategoriesParam) (*GetProductAttributeCategoriesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAttributeCategories not implemented")
}
func (UnimplementedAdminApiServer) GetProductAttributeCategory(context.Context, *GetProductAttributeCategoryReq) (*GetProductAttributeCategoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAttributeCategory not implemented")
}
func (UnimplementedAdminApiServer) DeleteProductAttributeCategory(context.Context, *DeleteProductAttributeCategoryReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductAttributeCategory not implemented")
}
func (UnimplementedAdminApiServer) CreateProductAttribute(context.Context, *AddOrUpdateProductAttributeParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductAttribute not implemented")
}
func (UnimplementedAdminApiServer) UpdateProductAttribute(context.Context, *AddOrUpdateProductAttributeParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttribute not implemented")
}
func (UnimplementedAdminApiServer) GetProductAttributes(context.Context, *GetProductAttributesParam) (*GetProductAttributesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAttributes not implemented")
}
func (UnimplementedAdminApiServer) GetProductAttribute(context.Context, *GetProductAttributeReq) (*GetProductAttributeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAttribute not implemented")
}
func (UnimplementedAdminApiServer) DeleteProductAttribute(context.Context, *DeleteProductAttributeReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductAttribute not implemented")
}
func (UnimplementedAdminApiServer) CreateProduct(context.Context, *AddOrUpdateProductParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedAdminApiServer) UpdateProduct(context.Context, *AddOrUpdateProductParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedAdminApiServer) GetProducts(context.Context, *GetProductsParam) (*GetProductsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedAdminApiServer) GetProduct(context.Context, *GetProductReq) (*GetProductRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedAdminApiServer) DeleteProduct(context.Context, *DeleteProductReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedAdminApiServer) BatchUpdateSkuStock(context.Context, *BatchUpdateSkuStockParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateSkuStock not implemented")
}
func (UnimplementedAdminApiServer) GetSkuStocksByProductId(context.Context, *GetSkuStocksByProductIdParam) (*GetSkuStocksByProductIdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkuStocksByProductId not implemented")
}
func (UnimplementedAdminApiServer) mustEmbedUnimplementedAdminApiServer() {}

// UnsafeAdminApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminApiServer will
// result in compilation errors.
type UnsafeAdminApiServer interface {
	mustEmbedUnimplementedAdminApiServer()
}

func RegisterAdminApiServer(s grpc.ServiceRegistrar, srv AdminApiServer) {
	s.RegisterService(&AdminApi_ServiceDesc, srv)
}

func _AdminApi_CreateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductCategoryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).CreateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_CreateProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).CreateProductCategory(ctx, req.(*AddOrUpdateProductCategoryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_UpdateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductCategoryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).UpdateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_UpdateProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).UpdateProductCategory(ctx, req.(*AddOrUpdateProductCategoryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_GetProductCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoriesParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).GetProductCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_GetProductCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).GetProductCategories(ctx, req.(*GetProductCategoriesParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_GetProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).GetProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_GetProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).GetProductCategory(ctx, req.(*GetProductCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_DeleteProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).DeleteProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_DeleteProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).DeleteProductCategory(ctx, req.(*DeleteProductCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_GetProductCategoriesWithChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoriesWithChildrenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).GetProductCategoriesWithChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_GetProductCategoriesWithChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).GetProductCategoriesWithChildren(ctx, req.(*GetProductCategoriesWithChildrenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateBrandParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_CreateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).CreateBrand(ctx, req.(*AddOrUpdateBrandParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateBrandParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_UpdateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).UpdateBrand(ctx, req.(*AddOrUpdateBrandParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_GetBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).GetBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_GetBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).GetBrands(ctx, req.(*GetBrandsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_GetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).GetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_GetBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).GetBrand(ctx, req.(*GetBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_DeleteBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).DeleteBrand(ctx, req.(*DeleteBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_CreateProductAttributeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductAttributeCategoryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).CreateProductAttributeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_CreateProductAttributeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).CreateProductAttributeCategory(ctx, req.(*AddOrUpdateProductAttributeCategoryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_UpdateProductAttributeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductAttributeCategoryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).UpdateProductAttributeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_UpdateProductAttributeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).UpdateProductAttributeCategory(ctx, req.(*AddOrUpdateProductAttributeCategoryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_GetProductAttributeCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAttributeCategoriesParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).GetProductAttributeCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_GetProductAttributeCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).GetProductAttributeCategories(ctx, req.(*GetProductAttributeCategoriesParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_GetProductAttributeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAttributeCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).GetProductAttributeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_GetProductAttributeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).GetProductAttributeCategory(ctx, req.(*GetProductAttributeCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_DeleteProductAttributeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductAttributeCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).DeleteProductAttributeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_DeleteProductAttributeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).DeleteProductAttributeCategory(ctx, req.(*DeleteProductAttributeCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_CreateProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductAttributeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).CreateProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_CreateProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).CreateProductAttribute(ctx, req.(*AddOrUpdateProductAttributeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_UpdateProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductAttributeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).UpdateProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_UpdateProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).UpdateProductAttribute(ctx, req.(*AddOrUpdateProductAttributeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_GetProductAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAttributesParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).GetProductAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_GetProductAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).GetProductAttributes(ctx, req.(*GetProductAttributesParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_GetProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).GetProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_GetProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).GetProductAttribute(ctx, req.(*GetProductAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_DeleteProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).DeleteProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_DeleteProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).DeleteProductAttribute(ctx, req.(*DeleteProductAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).CreateProduct(ctx, req.(*AddOrUpdateProductParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).UpdateProduct(ctx, req.(*AddOrUpdateProductParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_GetProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).GetProducts(ctx, req.(*GetProductsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).GetProduct(ctx, req.(*GetProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).DeleteProduct(ctx, req.(*DeleteProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_BatchUpdateSkuStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateSkuStockParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).BatchUpdateSkuStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_BatchUpdateSkuStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).BatchUpdateSkuStock(ctx, req.(*BatchUpdateSkuStockParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminApi_GetSkuStocksByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkuStocksByProductIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminApiServer).GetSkuStocksByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminApi_GetSkuStocksByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminApiServer).GetSkuStocksByProductId(ctx, req.(*GetSkuStocksByProductIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminApi_ServiceDesc is the grpc.ServiceDesc for AdminApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminApi",
	HandlerType: (*AdminApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProductCategory",
			Handler:    _AdminApi_CreateProductCategory_Handler,
		},
		{
			MethodName: "UpdateProductCategory",
			Handler:    _AdminApi_UpdateProductCategory_Handler,
		},
		{
			MethodName: "GetProductCategories",
			Handler:    _AdminApi_GetProductCategories_Handler,
		},
		{
			MethodName: "GetProductCategory",
			Handler:    _AdminApi_GetProductCategory_Handler,
		},
		{
			MethodName: "DeleteProductCategory",
			Handler:    _AdminApi_DeleteProductCategory_Handler,
		},
		{
			MethodName: "GetProductCategoriesWithChildren",
			Handler:    _AdminApi_GetProductCategoriesWithChildren_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _AdminApi_CreateBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _AdminApi_UpdateBrand_Handler,
		},
		{
			MethodName: "GetBrands",
			Handler:    _AdminApi_GetBrands_Handler,
		},
		{
			MethodName: "GetBrand",
			Handler:    _AdminApi_GetBrand_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _AdminApi_DeleteBrand_Handler,
		},
		{
			MethodName: "CreateProductAttributeCategory",
			Handler:    _AdminApi_CreateProductAttributeCategory_Handler,
		},
		{
			MethodName: "UpdateProductAttributeCategory",
			Handler:    _AdminApi_UpdateProductAttributeCategory_Handler,
		},
		{
			MethodName: "GetProductAttributeCategories",
			Handler:    _AdminApi_GetProductAttributeCategories_Handler,
		},
		{
			MethodName: "GetProductAttributeCategory",
			Handler:    _AdminApi_GetProductAttributeCategory_Handler,
		},
		{
			MethodName: "DeleteProductAttributeCategory",
			Handler:    _AdminApi_DeleteProductAttributeCategory_Handler,
		},
		{
			MethodName: "CreateProductAttribute",
			Handler:    _AdminApi_CreateProductAttribute_Handler,
		},
		{
			MethodName: "UpdateProductAttribute",
			Handler:    _AdminApi_UpdateProductAttribute_Handler,
		},
		{
			MethodName: "GetProductAttributes",
			Handler:    _AdminApi_GetProductAttributes_Handler,
		},
		{
			MethodName: "GetProductAttribute",
			Handler:    _AdminApi_GetProductAttribute_Handler,
		},
		{
			MethodName: "DeleteProductAttribute",
			Handler:    _AdminApi_DeleteProductAttribute_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _AdminApi_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _AdminApi_UpdateProduct_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _AdminApi_GetProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _AdminApi_GetProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _AdminApi_DeleteProduct_Handler,
		},
		{
			MethodName: "BatchUpdateSkuStock",
			Handler:    _AdminApi_BatchUpdateSkuStock_Handler,
		},
		{
			MethodName: "GetSkuStocksByProductId",
			Handler:    _AdminApi_GetSkuStocksByProductId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/admin.proto",
}
