// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: admin/oms_admin.proto

package mall

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OmsAdminApi_CreateOrderReturnReason_FullMethodName = "/admin.OmsAdminApi/CreateOrderReturnReason"
	OmsAdminApi_UpdateOrderReturnReason_FullMethodName = "/admin.OmsAdminApi/UpdateOrderReturnReason"
	OmsAdminApi_GetOrderReturnReasons_FullMethodName   = "/admin.OmsAdminApi/GetOrderReturnReasons"
	OmsAdminApi_GetOrderReturnReason_FullMethodName    = "/admin.OmsAdminApi/GetOrderReturnReason"
	OmsAdminApi_DeleteOrderReturnReason_FullMethodName = "/admin.OmsAdminApi/DeleteOrderReturnReason"
)

// OmsAdminApiClient is the client API for OmsAdminApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmsAdminApiClient interface {
	// 添加退货原因
	CreateOrderReturnReason(ctx context.Context, in *AddOrUpdateOrderReturnReasonParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改退货原因
	UpdateOrderReturnReason(ctx context.Context, in *AddOrUpdateOrderReturnReasonParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询退货原因
	GetOrderReturnReasons(ctx context.Context, in *GetOrderReturnReasonsParam, opts ...grpc.CallOption) (*GetOrderReturnReasonsRsp, error)
	// 根据id获取退货原因
	GetOrderReturnReason(ctx context.Context, in *GetOrderReturnReasonReq, opts ...grpc.CallOption) (*GetOrderReturnReasonRsp, error)
	// 删除退货原因
	DeleteOrderReturnReason(ctx context.Context, in *DeleteOrderReturnReasonReq, opts ...grpc.CallOption) (*CommonRsp, error)
}

type omsAdminApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOmsAdminApiClient(cc grpc.ClientConnInterface) OmsAdminApiClient {
	return &omsAdminApiClient{cc}
}

func (c *omsAdminApiClient) CreateOrderReturnReason(ctx context.Context, in *AddOrUpdateOrderReturnReasonParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, OmsAdminApi_CreateOrderReturnReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsAdminApiClient) UpdateOrderReturnReason(ctx context.Context, in *AddOrUpdateOrderReturnReasonParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, OmsAdminApi_UpdateOrderReturnReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsAdminApiClient) GetOrderReturnReasons(ctx context.Context, in *GetOrderReturnReasonsParam, opts ...grpc.CallOption) (*GetOrderReturnReasonsRsp, error) {
	out := new(GetOrderReturnReasonsRsp)
	err := c.cc.Invoke(ctx, OmsAdminApi_GetOrderReturnReasons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsAdminApiClient) GetOrderReturnReason(ctx context.Context, in *GetOrderReturnReasonReq, opts ...grpc.CallOption) (*GetOrderReturnReasonRsp, error) {
	out := new(GetOrderReturnReasonRsp)
	err := c.cc.Invoke(ctx, OmsAdminApi_GetOrderReturnReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsAdminApiClient) DeleteOrderReturnReason(ctx context.Context, in *DeleteOrderReturnReasonReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, OmsAdminApi_DeleteOrderReturnReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmsAdminApiServer is the server API for OmsAdminApi service.
// All implementations must embed UnimplementedOmsAdminApiServer
// for forward compatibility
type OmsAdminApiServer interface {
	// 添加退货原因
	CreateOrderReturnReason(context.Context, *AddOrUpdateOrderReturnReasonParam) (*CommonRsp, error)
	// 修改退货原因
	UpdateOrderReturnReason(context.Context, *AddOrUpdateOrderReturnReasonParam) (*CommonRsp, error)
	// 分页查询退货原因
	GetOrderReturnReasons(context.Context, *GetOrderReturnReasonsParam) (*GetOrderReturnReasonsRsp, error)
	// 根据id获取退货原因
	GetOrderReturnReason(context.Context, *GetOrderReturnReasonReq) (*GetOrderReturnReasonRsp, error)
	// 删除退货原因
	DeleteOrderReturnReason(context.Context, *DeleteOrderReturnReasonReq) (*CommonRsp, error)
	mustEmbedUnimplementedOmsAdminApiServer()
}

// UnimplementedOmsAdminApiServer must be embedded to have forward compatible implementations.
type UnimplementedOmsAdminApiServer struct {
}

func (UnimplementedOmsAdminApiServer) CreateOrderReturnReason(context.Context, *AddOrUpdateOrderReturnReasonParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderReturnReason not implemented")
}
func (UnimplementedOmsAdminApiServer) UpdateOrderReturnReason(context.Context, *AddOrUpdateOrderReturnReasonParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderReturnReason not implemented")
}
func (UnimplementedOmsAdminApiServer) GetOrderReturnReasons(context.Context, *GetOrderReturnReasonsParam) (*GetOrderReturnReasonsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderReturnReasons not implemented")
}
func (UnimplementedOmsAdminApiServer) GetOrderReturnReason(context.Context, *GetOrderReturnReasonReq) (*GetOrderReturnReasonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderReturnReason not implemented")
}
func (UnimplementedOmsAdminApiServer) DeleteOrderReturnReason(context.Context, *DeleteOrderReturnReasonReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderReturnReason not implemented")
}
func (UnimplementedOmsAdminApiServer) mustEmbedUnimplementedOmsAdminApiServer() {}

// UnsafeOmsAdminApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmsAdminApiServer will
// result in compilation errors.
type UnsafeOmsAdminApiServer interface {
	mustEmbedUnimplementedOmsAdminApiServer()
}

func RegisterOmsAdminApiServer(s grpc.ServiceRegistrar, srv OmsAdminApiServer) {
	s.RegisterService(&OmsAdminApi_ServiceDesc, srv)
}

func _OmsAdminApi_CreateOrderReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateOrderReturnReasonParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsAdminApiServer).CreateOrderReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmsAdminApi_CreateOrderReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsAdminApiServer).CreateOrderReturnReason(ctx, req.(*AddOrUpdateOrderReturnReasonParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsAdminApi_UpdateOrderReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateOrderReturnReasonParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsAdminApiServer).UpdateOrderReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmsAdminApi_UpdateOrderReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsAdminApiServer).UpdateOrderReturnReason(ctx, req.(*AddOrUpdateOrderReturnReasonParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsAdminApi_GetOrderReturnReasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderReturnReasonsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsAdminApiServer).GetOrderReturnReasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmsAdminApi_GetOrderReturnReasons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsAdminApiServer).GetOrderReturnReasons(ctx, req.(*GetOrderReturnReasonsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsAdminApi_GetOrderReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderReturnReasonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsAdminApiServer).GetOrderReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmsAdminApi_GetOrderReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsAdminApiServer).GetOrderReturnReason(ctx, req.(*GetOrderReturnReasonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmsAdminApi_DeleteOrderReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderReturnReasonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsAdminApiServer).DeleteOrderReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmsAdminApi_DeleteOrderReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsAdminApiServer).DeleteOrderReturnReason(ctx, req.(*DeleteOrderReturnReasonReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OmsAdminApi_ServiceDesc is the grpc.ServiceDesc for OmsAdminApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OmsAdminApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.OmsAdminApi",
	HandlerType: (*OmsAdminApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderReturnReason",
			Handler:    _OmsAdminApi_CreateOrderReturnReason_Handler,
		},
		{
			MethodName: "UpdateOrderReturnReason",
			Handler:    _OmsAdminApi_UpdateOrderReturnReason_Handler,
		},
		{
			MethodName: "GetOrderReturnReasons",
			Handler:    _OmsAdminApi_GetOrderReturnReasons_Handler,
		},
		{
			MethodName: "GetOrderReturnReason",
			Handler:    _OmsAdminApi_GetOrderReturnReason_Handler,
		},
		{
			MethodName: "DeleteOrderReturnReason",
			Handler:    _OmsAdminApi_DeleteOrderReturnReason_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/oms_admin.proto",
}
