// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: portal/portal.proto

package mall

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PortalApi_ProductCateList_FullMethodName = "/admin.PortalApi/ProductCateList"
)

// PortalApiClient is the client API for PortalApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortalApiClient interface {
	ProductCateList(ctx context.Context, in *ProductCateListReq, opts ...grpc.CallOption) (*PortalCommonRsp, error)
}

type portalApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPortalApiClient(cc grpc.ClientConnInterface) PortalApiClient {
	return &portalApiClient{cc}
}

func (c *portalApiClient) ProductCateList(ctx context.Context, in *ProductCateListReq, opts ...grpc.CallOption) (*PortalCommonRsp, error) {
	out := new(PortalCommonRsp)
	err := c.cc.Invoke(ctx, PortalApi_ProductCateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortalApiServer is the server API for PortalApi service.
// All implementations must embed UnimplementedPortalApiServer
// for forward compatibility
type PortalApiServer interface {
	ProductCateList(context.Context, *ProductCateListReq) (*PortalCommonRsp, error)
	mustEmbedUnimplementedPortalApiServer()
}

// UnimplementedPortalApiServer must be embedded to have forward compatible implementations.
type UnimplementedPortalApiServer struct {
}

func (UnimplementedPortalApiServer) ProductCateList(context.Context, *ProductCateListReq) (*PortalCommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCateList not implemented")
}
func (UnimplementedPortalApiServer) mustEmbedUnimplementedPortalApiServer() {}

// UnsafePortalApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortalApiServer will
// result in compilation errors.
type UnsafePortalApiServer interface {
	mustEmbedUnimplementedPortalApiServer()
}

func RegisterPortalApiServer(s grpc.ServiceRegistrar, srv PortalApiServer) {
	s.RegisterService(&PortalApi_ServiceDesc, srv)
}

func _PortalApi_ProductCateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalApiServer).ProductCateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalApi_ProductCateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalApiServer).ProductCateList(ctx, req.(*ProductCateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PortalApi_ServiceDesc is the grpc.ServiceDesc for PortalApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortalApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.PortalApi",
	HandlerType: (*PortalApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductCateList",
			Handler:    _PortalApi_ProductCateList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal/portal.proto",
}
