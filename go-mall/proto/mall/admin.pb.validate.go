// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/admin.proto

package mall

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonRspMultiError, or nil
// if none found.
func (m *CommonRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CommonRspMultiError(errors)
	}

	return nil
}

// CommonRspMultiError is an error wrapping multiple validation errors returned
// by CommonRsp.ValidateAll() if the designated constraints aren't met.
type CommonRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonRspMultiError) AllErrors() []error { return m }

// CommonRspValidationError is the validation error returned by
// CommonRsp.Validate if the designated constraints aren't met.
type CommonRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonRspValidationError) ErrorName() string { return "CommonRspValidationError" }

// Error satisfies the builtin error interface
func (e CommonRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonRspValidationError{}

// Validate checks the field values on AddOrUpdateProductCategoryParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateProductCategoryParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateProductCategoryParam with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddOrUpdateProductCategoryParamMultiError, or nil if none found.
func (m *AddOrUpdateProductCategoryParam) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateProductCategoryParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetParentId() <= 0 {
		err := AddOrUpdateProductCategoryParamValidationError{
			field:  "ParentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddOrUpdateProductCategoryParamValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProductUnit

	if _, ok := _AddOrUpdateProductCategoryParam_NavStatus_InLookup[m.GetNavStatus()]; !ok {
		err := AddOrUpdateProductCategoryParamValidationError{
			field:  "NavStatus",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateProductCategoryParam_ShowStatus_InLookup[m.GetShowStatus()]; !ok {
		err := AddOrUpdateProductCategoryParamValidationError{
			field:  "ShowStatus",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() < 0 {
		err := AddOrUpdateProductCategoryParamValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Icon

	// no validation rules for Keywords

	// no validation rules for Description

	if len(errors) > 0 {
		return AddOrUpdateProductCategoryParamMultiError(errors)
	}

	return nil
}

// AddOrUpdateProductCategoryParamMultiError is an error wrapping multiple
// validation errors returned by AddOrUpdateProductCategoryParam.ValidateAll()
// if the designated constraints aren't met.
type AddOrUpdateProductCategoryParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateProductCategoryParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateProductCategoryParamMultiError) AllErrors() []error { return m }

// AddOrUpdateProductCategoryParamValidationError is the validation error
// returned by AddOrUpdateProductCategoryParam.Validate if the designated
// constraints aren't met.
type AddOrUpdateProductCategoryParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateProductCategoryParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateProductCategoryParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateProductCategoryParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateProductCategoryParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateProductCategoryParamValidationError) ErrorName() string {
	return "AddOrUpdateProductCategoryParamValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateProductCategoryParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateProductCategoryParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateProductCategoryParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateProductCategoryParamValidationError{}

var _AddOrUpdateProductCategoryParam_NavStatus_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

var _AddOrUpdateProductCategoryParam_ShowStatus_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on GetProductCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductCategoryReqMultiError, or nil if none found.
func (m *GetProductCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProductCategoryReqMultiError(errors)
	}

	return nil
}

// GetProductCategoryReqMultiError is an error wrapping multiple validation
// errors returned by GetProductCategoryReq.ValidateAll() if the designated
// constraints aren't met.
type GetProductCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoryReqMultiError) AllErrors() []error { return m }

// GetProductCategoryReqValidationError is the validation error returned by
// GetProductCategoryReq.Validate if the designated constraints aren't met.
type GetProductCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoryReqValidationError) ErrorName() string {
	return "GetProductCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoryReqValidationError{}

// Validate checks the field values on GetProductCategoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoryRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductCategoryRspMultiError, or nil if none found.
func (m *GetProductCategoryRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoryRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductCategoryRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductCategoryRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductCategoryRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductCategoryRspMultiError(errors)
	}

	return nil
}

// GetProductCategoryRspMultiError is an error wrapping multiple validation
// errors returned by GetProductCategoryRsp.ValidateAll() if the designated
// constraints aren't met.
type GetProductCategoryRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoryRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoryRspMultiError) AllErrors() []error { return m }

// GetProductCategoryRspValidationError is the validation error returned by
// GetProductCategoryRsp.Validate if the designated constraints aren't met.
type GetProductCategoryRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoryRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoryRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoryRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoryRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoryRspValidationError) ErrorName() string {
	return "GetProductCategoryRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoryRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoryRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoryRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoryRspValidationError{}

// Validate checks the field values on GetProductCategoriesParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoriesParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoriesParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductCategoriesParamMultiError, or nil if none found.
func (m *GetProductCategoriesParam) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoriesParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductCategoriesParamValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductCategoriesParamValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductCategoriesParamValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParentId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductCategoriesParamValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductCategoriesParamValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductCategoriesParamValidationError{
				field:  "ParentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return GetProductCategoriesParamMultiError(errors)
	}

	return nil
}

// GetProductCategoriesParamMultiError is an error wrapping multiple validation
// errors returned by GetProductCategoriesParam.ValidateAll() if the
// designated constraints aren't met.
type GetProductCategoriesParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoriesParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoriesParamMultiError) AllErrors() []error { return m }

// GetProductCategoriesParamValidationError is the validation error returned by
// GetProductCategoriesParam.Validate if the designated constraints aren't met.
type GetProductCategoriesParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoriesParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoriesParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoriesParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoriesParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoriesParamValidationError) ErrorName() string {
	return "GetProductCategoriesParamValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoriesParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoriesParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoriesParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoriesParamValidationError{}

// Validate checks the field values on ProductCategoriesData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductCategoriesData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCategoriesData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCategoriesDataMultiError, or nil if none found.
func (m *ProductCategoriesData) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCategoriesData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductCategoriesDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductCategoriesDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductCategoriesDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageTotal

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return ProductCategoriesDataMultiError(errors)
	}

	return nil
}

// ProductCategoriesDataMultiError is an error wrapping multiple validation
// errors returned by ProductCategoriesData.ValidateAll() if the designated
// constraints aren't met.
type ProductCategoriesDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCategoriesDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCategoriesDataMultiError) AllErrors() []error { return m }

// ProductCategoriesDataValidationError is the validation error returned by
// ProductCategoriesData.Validate if the designated constraints aren't met.
type ProductCategoriesDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCategoriesDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCategoriesDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCategoriesDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCategoriesDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCategoriesDataValidationError) ErrorName() string {
	return "ProductCategoriesDataValidationError"
}

// Error satisfies the builtin error interface
func (e ProductCategoriesDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCategoriesData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCategoriesDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCategoriesDataValidationError{}

// Validate checks the field values on GetProductCategoriesRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoriesRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoriesRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductCategoriesRspMultiError, or nil if none found.
func (m *GetProductCategoriesRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoriesRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductCategoriesRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductCategoriesRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductCategoriesRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductCategoriesRspMultiError(errors)
	}

	return nil
}

// GetProductCategoriesRspMultiError is an error wrapping multiple validation
// errors returned by GetProductCategoriesRsp.ValidateAll() if the designated
// constraints aren't met.
type GetProductCategoriesRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoriesRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoriesRspMultiError) AllErrors() []error { return m }

// GetProductCategoriesRspValidationError is the validation error returned by
// GetProductCategoriesRsp.Validate if the designated constraints aren't met.
type GetProductCategoriesRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoriesRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoriesRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoriesRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoriesRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoriesRspValidationError) ErrorName() string {
	return "GetProductCategoriesRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoriesRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoriesRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoriesRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoriesRspValidationError{}

// Validate checks the field values on DeleteProductCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductCategoryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductCategoryReqMultiError, or nil if none found.
func (m *DeleteProductCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProductCategoryReqMultiError(errors)
	}

	return nil
}

// DeleteProductCategoryReqMultiError is an error wrapping multiple validation
// errors returned by DeleteProductCategoryReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductCategoryReqMultiError) AllErrors() []error { return m }

// DeleteProductCategoryReqValidationError is the validation error returned by
// DeleteProductCategoryReq.Validate if the designated constraints aren't met.
type DeleteProductCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductCategoryReqValidationError) ErrorName() string {
	return "DeleteProductCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductCategoryReqValidationError{}

// Validate checks the field values on GetProductCategoriesWithChildrenReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetProductCategoriesWithChildrenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoriesWithChildrenReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetProductCategoriesWithChildrenReqMultiError, or nil if none found.
func (m *GetProductCategoriesWithChildrenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoriesWithChildrenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProductCategoriesWithChildrenReqMultiError(errors)
	}

	return nil
}

// GetProductCategoriesWithChildrenReqMultiError is an error wrapping multiple
// validation errors returned by
// GetProductCategoriesWithChildrenReq.ValidateAll() if the designated
// constraints aren't met.
type GetProductCategoriesWithChildrenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoriesWithChildrenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoriesWithChildrenReqMultiError) AllErrors() []error { return m }

// GetProductCategoriesWithChildrenReqValidationError is the validation error
// returned by GetProductCategoriesWithChildrenReq.Validate if the designated
// constraints aren't met.
type GetProductCategoriesWithChildrenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoriesWithChildrenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoriesWithChildrenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoriesWithChildrenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoriesWithChildrenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoriesWithChildrenReqValidationError) ErrorName() string {
	return "GetProductCategoriesWithChildrenReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoriesWithChildrenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoriesWithChildrenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoriesWithChildrenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoriesWithChildrenReqValidationError{}

// Validate checks the field values on ProductCategoryTreeItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductCategoryTreeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCategoryTreeItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCategoryTreeItemMultiError, or nil if none found.
func (m *ProductCategoryTreeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCategoryTreeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductCategoryTreeItemValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductCategoryTreeItemValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductCategoryTreeItemValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetChild() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductCategoryTreeItemValidationError{
						field:  fmt.Sprintf("Child[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductCategoryTreeItemValidationError{
						field:  fmt.Sprintf("Child[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductCategoryTreeItemValidationError{
					field:  fmt.Sprintf("Child[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProductCategoryTreeItemMultiError(errors)
	}

	return nil
}

// ProductCategoryTreeItemMultiError is an error wrapping multiple validation
// errors returned by ProductCategoryTreeItem.ValidateAll() if the designated
// constraints aren't met.
type ProductCategoryTreeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCategoryTreeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCategoryTreeItemMultiError) AllErrors() []error { return m }

// ProductCategoryTreeItemValidationError is the validation error returned by
// ProductCategoryTreeItem.Validate if the designated constraints aren't met.
type ProductCategoryTreeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCategoryTreeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCategoryTreeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCategoryTreeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCategoryTreeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCategoryTreeItemValidationError) ErrorName() string {
	return "ProductCategoryTreeItemValidationError"
}

// Error satisfies the builtin error interface
func (e ProductCategoryTreeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCategoryTreeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCategoryTreeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCategoryTreeItemValidationError{}

// Validate checks the field values on GetProductCategoriesWithChildrenRsp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetProductCategoriesWithChildrenRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoriesWithChildrenRsp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetProductCategoriesWithChildrenRspMultiError, or nil if none found.
func (m *GetProductCategoriesWithChildrenRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoriesWithChildrenRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProductCategoriesWithChildrenRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProductCategoriesWithChildrenRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProductCategoriesWithChildrenRspValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetProductCategoriesWithChildrenRspMultiError(errors)
	}

	return nil
}

// GetProductCategoriesWithChildrenRspMultiError is an error wrapping multiple
// validation errors returned by
// GetProductCategoriesWithChildrenRsp.ValidateAll() if the designated
// constraints aren't met.
type GetProductCategoriesWithChildrenRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoriesWithChildrenRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoriesWithChildrenRspMultiError) AllErrors() []error { return m }

// GetProductCategoriesWithChildrenRspValidationError is the validation error
// returned by GetProductCategoriesWithChildrenRsp.Validate if the designated
// constraints aren't met.
type GetProductCategoriesWithChildrenRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoriesWithChildrenRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoriesWithChildrenRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoriesWithChildrenRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoriesWithChildrenRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoriesWithChildrenRspValidationError) ErrorName() string {
	return "GetProductCategoriesWithChildrenRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoriesWithChildrenRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoriesWithChildrenRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoriesWithChildrenRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoriesWithChildrenRspValidationError{}

// Validate checks the field values on AddOrUpdateBrandParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateBrandParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateBrandParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrUpdateBrandParamMultiError, or nil if none found.
func (m *AddOrUpdateBrandParam) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateBrandParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddOrUpdateBrandParamValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FirstLetter

	if m.GetSort() < 0 {
		err := AddOrUpdateBrandParamValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateBrandParam_FactoryStatus_InLookup[m.GetFactoryStatus()]; !ok {
		err := AddOrUpdateBrandParamValidationError{
			field:  "FactoryStatus",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateBrandParam_ShowStatus_InLookup[m.GetShowStatus()]; !ok {
		err := AddOrUpdateBrandParamValidationError{
			field:  "ShowStatus",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLogo()) < 1 {
		err := AddOrUpdateBrandParamValidationError{
			field:  "Logo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BigPic

	// no validation rules for BrandStory

	if len(errors) > 0 {
		return AddOrUpdateBrandParamMultiError(errors)
	}

	return nil
}

// AddOrUpdateBrandParamMultiError is an error wrapping multiple validation
// errors returned by AddOrUpdateBrandParam.ValidateAll() if the designated
// constraints aren't met.
type AddOrUpdateBrandParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateBrandParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateBrandParamMultiError) AllErrors() []error { return m }

// AddOrUpdateBrandParamValidationError is the validation error returned by
// AddOrUpdateBrandParam.Validate if the designated constraints aren't met.
type AddOrUpdateBrandParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateBrandParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateBrandParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateBrandParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateBrandParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateBrandParamValidationError) ErrorName() string {
	return "AddOrUpdateBrandParamValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateBrandParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateBrandParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateBrandParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateBrandParamValidationError{}

var _AddOrUpdateBrandParam_FactoryStatus_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

var _AddOrUpdateBrandParam_ShowStatus_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on GetBrandsParam with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBrandsParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandsParam with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBrandsParamMultiError,
// or nil if none found.
func (m *GetBrandsParam) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandsParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() < 0 {
		err := GetBrandsParamValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageNum() < 0 {
		err := GetBrandsParamValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetShowStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBrandsParamValidationError{
					field:  "ShowStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBrandsParamValidationError{
					field:  "ShowStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShowStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBrandsParamValidationError{
				field:  "ShowStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBrandsParamMultiError(errors)
	}

	return nil
}

// GetBrandsParamMultiError is an error wrapping multiple validation errors
// returned by GetBrandsParam.ValidateAll() if the designated constraints
// aren't met.
type GetBrandsParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandsParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandsParamMultiError) AllErrors() []error { return m }

// GetBrandsParamValidationError is the validation error returned by
// GetBrandsParam.Validate if the designated constraints aren't met.
type GetBrandsParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandsParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandsParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandsParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandsParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandsParamValidationError) ErrorName() string { return "GetBrandsParamValidationError" }

// Error satisfies the builtin error interface
func (e GetBrandsParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandsParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandsParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandsParamValidationError{}

// Validate checks the field values on GetBrandsRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBrandsRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandsRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBrandsRspMultiError, or
// nil if none found.
func (m *GetBrandsRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandsRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBrandsRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBrandsRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBrandsRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBrandsRspMultiError(errors)
	}

	return nil
}

// GetBrandsRspMultiError is an error wrapping multiple validation errors
// returned by GetBrandsRsp.ValidateAll() if the designated constraints aren't met.
type GetBrandsRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandsRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandsRspMultiError) AllErrors() []error { return m }

// GetBrandsRspValidationError is the validation error returned by
// GetBrandsRsp.Validate if the designated constraints aren't met.
type GetBrandsRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandsRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandsRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandsRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandsRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandsRspValidationError) ErrorName() string { return "GetBrandsRspValidationError" }

// Error satisfies the builtin error interface
func (e GetBrandsRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandsRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandsRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandsRspValidationError{}

// Validate checks the field values on GetBrandsData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBrandsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandsData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBrandsDataMultiError, or
// nil if none found.
func (m *GetBrandsData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBrandsDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBrandsDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBrandsDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageTotal

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return GetBrandsDataMultiError(errors)
	}

	return nil
}

// GetBrandsDataMultiError is an error wrapping multiple validation errors
// returned by GetBrandsData.ValidateAll() if the designated constraints
// aren't met.
type GetBrandsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandsDataMultiError) AllErrors() []error { return m }

// GetBrandsDataValidationError is the validation error returned by
// GetBrandsData.Validate if the designated constraints aren't met.
type GetBrandsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandsDataValidationError) ErrorName() string { return "GetBrandsDataValidationError" }

// Error satisfies the builtin error interface
func (e GetBrandsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandsDataValidationError{}

// Validate checks the field values on GetBrandReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBrandReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBrandReqMultiError, or
// nil if none found.
func (m *GetBrandReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBrandReqMultiError(errors)
	}

	return nil
}

// GetBrandReqMultiError is an error wrapping multiple validation errors
// returned by GetBrandReq.ValidateAll() if the designated constraints aren't met.
type GetBrandReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandReqMultiError) AllErrors() []error { return m }

// GetBrandReqValidationError is the validation error returned by
// GetBrandReq.Validate if the designated constraints aren't met.
type GetBrandReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandReqValidationError) ErrorName() string { return "GetBrandReqValidationError" }

// Error satisfies the builtin error interface
func (e GetBrandReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandReqValidationError{}

// Validate checks the field values on GetBrandRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBrandRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBrandRspMultiError, or
// nil if none found.
func (m *GetBrandRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBrandRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBrandRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBrandRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBrandRspMultiError(errors)
	}

	return nil
}

// GetBrandRspMultiError is an error wrapping multiple validation errors
// returned by GetBrandRsp.ValidateAll() if the designated constraints aren't met.
type GetBrandRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandRspMultiError) AllErrors() []error { return m }

// GetBrandRspValidationError is the validation error returned by
// GetBrandRsp.Validate if the designated constraints aren't met.
type GetBrandRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandRspValidationError) ErrorName() string { return "GetBrandRspValidationError" }

// Error satisfies the builtin error interface
func (e GetBrandRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandRspValidationError{}

// Validate checks the field values on DeleteBrandReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteBrandReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBrandReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteBrandReqMultiError,
// or nil if none found.
func (m *DeleteBrandReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBrandReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBrandReqMultiError(errors)
	}

	return nil
}

// DeleteBrandReqMultiError is an error wrapping multiple validation errors
// returned by DeleteBrandReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteBrandReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBrandReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBrandReqMultiError) AllErrors() []error { return m }

// DeleteBrandReqValidationError is the validation error returned by
// DeleteBrandReq.Validate if the designated constraints aren't met.
type DeleteBrandReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBrandReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBrandReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBrandReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBrandReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBrandReqValidationError) ErrorName() string { return "DeleteBrandReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteBrandReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBrandReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBrandReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBrandReqValidationError{}

// Validate checks the field values on AddOrUpdateProductAttributeCategoryParam
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddOrUpdateProductAttributeCategoryParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddOrUpdateProductAttributeCategoryParam with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AddOrUpdateProductAttributeCategoryParamMultiError, or nil if none found.
func (m *AddOrUpdateProductAttributeCategoryParam) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateProductAttributeCategoryParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddOrUpdateProductAttributeCategoryParamValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddOrUpdateProductAttributeCategoryParamMultiError(errors)
	}

	return nil
}

// AddOrUpdateProductAttributeCategoryParamMultiError is an error wrapping
// multiple validation errors returned by
// AddOrUpdateProductAttributeCategoryParam.ValidateAll() if the designated
// constraints aren't met.
type AddOrUpdateProductAttributeCategoryParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateProductAttributeCategoryParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateProductAttributeCategoryParamMultiError) AllErrors() []error { return m }

// AddOrUpdateProductAttributeCategoryParamValidationError is the validation
// error returned by AddOrUpdateProductAttributeCategoryParam.Validate if the
// designated constraints aren't met.
type AddOrUpdateProductAttributeCategoryParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateProductAttributeCategoryParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateProductAttributeCategoryParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateProductAttributeCategoryParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateProductAttributeCategoryParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateProductAttributeCategoryParamValidationError) ErrorName() string {
	return "AddOrUpdateProductAttributeCategoryParamValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateProductAttributeCategoryParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateProductAttributeCategoryParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateProductAttributeCategoryParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateProductAttributeCategoryParamValidationError{}

// Validate checks the field values on ProductAttributeCategoriesData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductAttributeCategoriesData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductAttributeCategoriesData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProductAttributeCategoriesDataMultiError, or nil if none found.
func (m *ProductAttributeCategoriesData) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductAttributeCategoriesData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductAttributeCategoriesDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductAttributeCategoriesDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductAttributeCategoriesDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageTotal

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return ProductAttributeCategoriesDataMultiError(errors)
	}

	return nil
}

// ProductAttributeCategoriesDataMultiError is an error wrapping multiple
// validation errors returned by ProductAttributeCategoriesData.ValidateAll()
// if the designated constraints aren't met.
type ProductAttributeCategoriesDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductAttributeCategoriesDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductAttributeCategoriesDataMultiError) AllErrors() []error { return m }

// ProductAttributeCategoriesDataValidationError is the validation error
// returned by ProductAttributeCategoriesData.Validate if the designated
// constraints aren't met.
type ProductAttributeCategoriesDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAttributeCategoriesDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAttributeCategoriesDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAttributeCategoriesDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAttributeCategoriesDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAttributeCategoriesDataValidationError) ErrorName() string {
	return "ProductAttributeCategoriesDataValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAttributeCategoriesDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAttributeCategoriesData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAttributeCategoriesDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAttributeCategoriesDataValidationError{}

// Validate checks the field values on GetProductAttributeCategoriesParam with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetProductAttributeCategoriesParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductAttributeCategoriesParam
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetProductAttributeCategoriesParamMultiError, or nil if none found.
func (m *GetProductAttributeCategoriesParam) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductAttributeCategoriesParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return GetProductAttributeCategoriesParamMultiError(errors)
	}

	return nil
}

// GetProductAttributeCategoriesParamMultiError is an error wrapping multiple
// validation errors returned by
// GetProductAttributeCategoriesParam.ValidateAll() if the designated
// constraints aren't met.
type GetProductAttributeCategoriesParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductAttributeCategoriesParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductAttributeCategoriesParamMultiError) AllErrors() []error { return m }

// GetProductAttributeCategoriesParamValidationError is the validation error
// returned by GetProductAttributeCategoriesParam.Validate if the designated
// constraints aren't met.
type GetProductAttributeCategoriesParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductAttributeCategoriesParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductAttributeCategoriesParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductAttributeCategoriesParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductAttributeCategoriesParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductAttributeCategoriesParamValidationError) ErrorName() string {
	return "GetProductAttributeCategoriesParamValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductAttributeCategoriesParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductAttributeCategoriesParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductAttributeCategoriesParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductAttributeCategoriesParamValidationError{}

// Validate checks the field values on GetProductAttributeCategoriesRsp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetProductAttributeCategoriesRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductAttributeCategoriesRsp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProductAttributeCategoriesRspMultiError, or nil if none found.
func (m *GetProductAttributeCategoriesRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductAttributeCategoriesRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductAttributeCategoriesRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductAttributeCategoriesRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductAttributeCategoriesRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductAttributeCategoriesRspMultiError(errors)
	}

	return nil
}

// GetProductAttributeCategoriesRspMultiError is an error wrapping multiple
// validation errors returned by
// GetProductAttributeCategoriesRsp.ValidateAll() if the designated
// constraints aren't met.
type GetProductAttributeCategoriesRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductAttributeCategoriesRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductAttributeCategoriesRspMultiError) AllErrors() []error { return m }

// GetProductAttributeCategoriesRspValidationError is the validation error
// returned by GetProductAttributeCategoriesRsp.Validate if the designated
// constraints aren't met.
type GetProductAttributeCategoriesRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductAttributeCategoriesRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductAttributeCategoriesRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductAttributeCategoriesRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductAttributeCategoriesRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductAttributeCategoriesRspValidationError) ErrorName() string {
	return "GetProductAttributeCategoriesRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductAttributeCategoriesRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductAttributeCategoriesRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductAttributeCategoriesRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductAttributeCategoriesRspValidationError{}

// Validate checks the field values on GetProductAttributeCategoryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductAttributeCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductAttributeCategoryReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProductAttributeCategoryReqMultiError, or nil if none found.
func (m *GetProductAttributeCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductAttributeCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProductAttributeCategoryReqMultiError(errors)
	}

	return nil
}

// GetProductAttributeCategoryReqMultiError is an error wrapping multiple
// validation errors returned by GetProductAttributeCategoryReq.ValidateAll()
// if the designated constraints aren't met.
type GetProductAttributeCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductAttributeCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductAttributeCategoryReqMultiError) AllErrors() []error { return m }

// GetProductAttributeCategoryReqValidationError is the validation error
// returned by GetProductAttributeCategoryReq.Validate if the designated
// constraints aren't met.
type GetProductAttributeCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductAttributeCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductAttributeCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductAttributeCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductAttributeCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductAttributeCategoryReqValidationError) ErrorName() string {
	return "GetProductAttributeCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductAttributeCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductAttributeCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductAttributeCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductAttributeCategoryReqValidationError{}

// Validate checks the field values on GetProductAttributeCategoryRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductAttributeCategoryRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductAttributeCategoryRsp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProductAttributeCategoryRspMultiError, or nil if none found.
func (m *GetProductAttributeCategoryRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductAttributeCategoryRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductAttributeCategoryRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductAttributeCategoryRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductAttributeCategoryRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductAttributeCategoryRspMultiError(errors)
	}

	return nil
}

// GetProductAttributeCategoryRspMultiError is an error wrapping multiple
// validation errors returned by GetProductAttributeCategoryRsp.ValidateAll()
// if the designated constraints aren't met.
type GetProductAttributeCategoryRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductAttributeCategoryRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductAttributeCategoryRspMultiError) AllErrors() []error { return m }

// GetProductAttributeCategoryRspValidationError is the validation error
// returned by GetProductAttributeCategoryRsp.Validate if the designated
// constraints aren't met.
type GetProductAttributeCategoryRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductAttributeCategoryRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductAttributeCategoryRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductAttributeCategoryRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductAttributeCategoryRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductAttributeCategoryRspValidationError) ErrorName() string {
	return "GetProductAttributeCategoryRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductAttributeCategoryRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductAttributeCategoryRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductAttributeCategoryRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductAttributeCategoryRspValidationError{}

// Validate checks the field values on DeleteProductAttributeCategoryReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteProductAttributeCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductAttributeCategoryReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteProductAttributeCategoryReqMultiError, or nil if none found.
func (m *DeleteProductAttributeCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductAttributeCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProductAttributeCategoryReqMultiError(errors)
	}

	return nil
}

// DeleteProductAttributeCategoryReqMultiError is an error wrapping multiple
// validation errors returned by
// DeleteProductAttributeCategoryReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductAttributeCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductAttributeCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductAttributeCategoryReqMultiError) AllErrors() []error { return m }

// DeleteProductAttributeCategoryReqValidationError is the validation error
// returned by DeleteProductAttributeCategoryReq.Validate if the designated
// constraints aren't met.
type DeleteProductAttributeCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductAttributeCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductAttributeCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductAttributeCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductAttributeCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductAttributeCategoryReqValidationError) ErrorName() string {
	return "DeleteProductAttributeCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductAttributeCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductAttributeCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductAttributeCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductAttributeCategoryReqValidationError{}

// Validate checks the field values on AddOrUpdateProductAttributeParam with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddOrUpdateProductAttributeParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateProductAttributeParam with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddOrUpdateProductAttributeParamMultiError, or nil if none found.
func (m *AddOrUpdateProductAttributeParam) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateProductAttributeParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetProductAttributeCategoryId() <= 0 {
		err := AddOrUpdateProductAttributeParamValidationError{
			field:  "ProductAttributeCategoryId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateProductAttributeParam_Type_InLookup[m.GetType()]; !ok {
		err := AddOrUpdateProductAttributeParamValidationError{
			field:  "Type",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddOrUpdateProductAttributeParamValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateProductAttributeParam_SelectType_InLookup[m.GetSelectType()]; !ok {
		err := AddOrUpdateProductAttributeParamValidationError{
			field:  "SelectType",
			reason: "value must be in list [0 1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateProductAttributeParam_InputType_InLookup[m.GetInputType()]; !ok {
		err := AddOrUpdateProductAttributeParamValidationError{
			field:  "InputType",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InputList

	// no validation rules for Sort

	if _, ok := _AddOrUpdateProductAttributeParam_FilterType_InLookup[m.GetFilterType()]; !ok {
		err := AddOrUpdateProductAttributeParamValidationError{
			field:  "FilterType",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateProductAttributeParam_SearchType_InLookup[m.GetSearchType()]; !ok {
		err := AddOrUpdateProductAttributeParamValidationError{
			field:  "SearchType",
			reason: "value must be in list [0 1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateProductAttributeParam_RelatedStatus_InLookup[m.GetRelatedStatus()]; !ok {
		err := AddOrUpdateProductAttributeParamValidationError{
			field:  "RelatedStatus",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddOrUpdateProductAttributeParam_HandAddStatus_InLookup[m.GetHandAddStatus()]; !ok {
		err := AddOrUpdateProductAttributeParamValidationError{
			field:  "HandAddStatus",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddOrUpdateProductAttributeParamMultiError(errors)
	}

	return nil
}

// AddOrUpdateProductAttributeParamMultiError is an error wrapping multiple
// validation errors returned by
// AddOrUpdateProductAttributeParam.ValidateAll() if the designated
// constraints aren't met.
type AddOrUpdateProductAttributeParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateProductAttributeParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateProductAttributeParamMultiError) AllErrors() []error { return m }

// AddOrUpdateProductAttributeParamValidationError is the validation error
// returned by AddOrUpdateProductAttributeParam.Validate if the designated
// constraints aren't met.
type AddOrUpdateProductAttributeParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateProductAttributeParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateProductAttributeParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateProductAttributeParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateProductAttributeParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateProductAttributeParamValidationError) ErrorName() string {
	return "AddOrUpdateProductAttributeParamValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateProductAttributeParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateProductAttributeParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateProductAttributeParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateProductAttributeParamValidationError{}

var _AddOrUpdateProductAttributeParam_Type_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

var _AddOrUpdateProductAttributeParam_SelectType_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
}

var _AddOrUpdateProductAttributeParam_InputType_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

var _AddOrUpdateProductAttributeParam_FilterType_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

var _AddOrUpdateProductAttributeParam_SearchType_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
}

var _AddOrUpdateProductAttributeParam_RelatedStatus_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

var _AddOrUpdateProductAttributeParam_HandAddStatus_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on GetProductAttributesParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductAttributesParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductAttributesParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductAttributesParamMultiError, or nil if none found.
func (m *GetProductAttributesParam) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductAttributesParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetProductAttributeCategoryId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductAttributesParamValidationError{
					field:  "ProductAttributeCategoryId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductAttributesParamValidationError{
					field:  "ProductAttributeCategoryId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductAttributeCategoryId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductAttributesParamValidationError{
				field:  "ProductAttributeCategoryId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductAttributesParamValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductAttributesParamValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductAttributesParamValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageNum() < 0 {
		err := GetProductAttributesParamValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := GetProductAttributesParamValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductAttributesParamMultiError(errors)
	}

	return nil
}

// GetProductAttributesParamMultiError is an error wrapping multiple validation
// errors returned by GetProductAttributesParam.ValidateAll() if the
// designated constraints aren't met.
type GetProductAttributesParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductAttributesParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductAttributesParamMultiError) AllErrors() []error { return m }

// GetProductAttributesParamValidationError is the validation error returned by
// GetProductAttributesParam.Validate if the designated constraints aren't met.
type GetProductAttributesParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductAttributesParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductAttributesParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductAttributesParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductAttributesParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductAttributesParamValidationError) ErrorName() string {
	return "GetProductAttributesParamValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductAttributesParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductAttributesParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductAttributesParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductAttributesParamValidationError{}

// Validate checks the field values on ProductAttributesData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductAttributesData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductAttributesData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductAttributesDataMultiError, or nil if none found.
func (m *ProductAttributesData) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductAttributesData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductAttributesDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductAttributesDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductAttributesDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageTotal

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return ProductAttributesDataMultiError(errors)
	}

	return nil
}

// ProductAttributesDataMultiError is an error wrapping multiple validation
// errors returned by ProductAttributesData.ValidateAll() if the designated
// constraints aren't met.
type ProductAttributesDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductAttributesDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductAttributesDataMultiError) AllErrors() []error { return m }

// ProductAttributesDataValidationError is the validation error returned by
// ProductAttributesData.Validate if the designated constraints aren't met.
type ProductAttributesDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAttributesDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAttributesDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAttributesDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAttributesDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAttributesDataValidationError) ErrorName() string {
	return "ProductAttributesDataValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAttributesDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAttributesData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAttributesDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAttributesDataValidationError{}

// Validate checks the field values on GetProductAttributesRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductAttributesRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductAttributesRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductAttributesRspMultiError, or nil if none found.
func (m *GetProductAttributesRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductAttributesRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductAttributesRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductAttributesRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductAttributesRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductAttributesRspMultiError(errors)
	}

	return nil
}

// GetProductAttributesRspMultiError is an error wrapping multiple validation
// errors returned by GetProductAttributesRsp.ValidateAll() if the designated
// constraints aren't met.
type GetProductAttributesRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductAttributesRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductAttributesRspMultiError) AllErrors() []error { return m }

// GetProductAttributesRspValidationError is the validation error returned by
// GetProductAttributesRsp.Validate if the designated constraints aren't met.
type GetProductAttributesRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductAttributesRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductAttributesRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductAttributesRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductAttributesRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductAttributesRspValidationError) ErrorName() string {
	return "GetProductAttributesRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductAttributesRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductAttributesRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductAttributesRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductAttributesRspValidationError{}

// Validate checks the field values on GetProductAttributeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductAttributeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductAttributeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductAttributeReqMultiError, or nil if none found.
func (m *GetProductAttributeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductAttributeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProductAttributeReqMultiError(errors)
	}

	return nil
}

// GetProductAttributeReqMultiError is an error wrapping multiple validation
// errors returned by GetProductAttributeReq.ValidateAll() if the designated
// constraints aren't met.
type GetProductAttributeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductAttributeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductAttributeReqMultiError) AllErrors() []error { return m }

// GetProductAttributeReqValidationError is the validation error returned by
// GetProductAttributeReq.Validate if the designated constraints aren't met.
type GetProductAttributeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductAttributeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductAttributeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductAttributeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductAttributeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductAttributeReqValidationError) ErrorName() string {
	return "GetProductAttributeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductAttributeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductAttributeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductAttributeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductAttributeReqValidationError{}

// Validate checks the field values on GetProductAttributeRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductAttributeRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductAttributeRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductAttributeRspMultiError, or nil if none found.
func (m *GetProductAttributeRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductAttributeRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductAttributeRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductAttributeRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductAttributeRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductAttributeRspMultiError(errors)
	}

	return nil
}

// GetProductAttributeRspMultiError is an error wrapping multiple validation
// errors returned by GetProductAttributeRsp.ValidateAll() if the designated
// constraints aren't met.
type GetProductAttributeRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductAttributeRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductAttributeRspMultiError) AllErrors() []error { return m }

// GetProductAttributeRspValidationError is the validation error returned by
// GetProductAttributeRsp.Validate if the designated constraints aren't met.
type GetProductAttributeRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductAttributeRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductAttributeRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductAttributeRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductAttributeRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductAttributeRspValidationError) ErrorName() string {
	return "GetProductAttributeRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductAttributeRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductAttributeRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductAttributeRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductAttributeRspValidationError{}

// Validate checks the field values on DeleteProductAttributeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductAttributeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductAttributeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductAttributeReqMultiError, or nil if none found.
func (m *DeleteProductAttributeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductAttributeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProductAttributeReqMultiError(errors)
	}

	return nil
}

// DeleteProductAttributeReqMultiError is an error wrapping multiple validation
// errors returned by DeleteProductAttributeReq.ValidateAll() if the
// designated constraints aren't met.
type DeleteProductAttributeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductAttributeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductAttributeReqMultiError) AllErrors() []error { return m }

// DeleteProductAttributeReqValidationError is the validation error returned by
// DeleteProductAttributeReq.Validate if the designated constraints aren't met.
type DeleteProductAttributeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductAttributeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductAttributeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductAttributeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductAttributeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductAttributeReqValidationError) ErrorName() string {
	return "DeleteProductAttributeReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductAttributeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductAttributeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductAttributeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductAttributeReqValidationError{}

// Validate checks the field values on AddOrUpdateProductParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateProductParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateProductParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrUpdateProductParamMultiError, or nil if none found.
func (m *AddOrUpdateProductParam) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateProductParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProductCategoryId

	// no validation rules for Name

	// no validation rules for SubTitle

	// no validation rules for BrandId

	// no validation rules for Description

	// no validation rules for ProductSN

	// no validation rules for Price

	// no validation rules for OriginalPrice

	// no validation rules for Stock

	// no validation rules for Unit

	// no validation rules for Weight

	// no validation rules for Sort

	// no validation rules for GiftPoint

	// no validation rules for GiftGrowth

	// no validation rules for UsePointLimit

	// no validation rules for PreviewStatus

	// no validation rules for PublishStatus

	// no validation rules for NewStatus

	// no validation rules for RecommandStatus

	// no validation rules for ServiceIds

	// no validation rules for DetailTitle

	// no validation rules for DetailDesc

	// no validation rules for Keywords

	// no validation rules for Note

	// no validation rules for PromotionType

	// no validation rules for PromotionPrice

	// no validation rules for PromotionStartTime

	// no validation rules for PromotionEndTime

	// no validation rules for ProductAttributeCategoryId

	// no validation rules for Pic

	// no validation rules for AlbumPics

	// no validation rules for DetailHTML

	// no validation rules for DetailMobileHTML

	// no validation rules for VerifyStatus

	// no validation rules for DeleteStatus

	// no validation rules for FeightTemplateId

	// no validation rules for Sale

	// no validation rules for LowStock

	// no validation rules for PromotionPerLimit

	// no validation rules for BrandName

	// no validation rules for ProductCategoryName

	if len(errors) > 0 {
		return AddOrUpdateProductParamMultiError(errors)
	}

	return nil
}

// AddOrUpdateProductParamMultiError is an error wrapping multiple validation
// errors returned by AddOrUpdateProductParam.ValidateAll() if the designated
// constraints aren't met.
type AddOrUpdateProductParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateProductParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateProductParamMultiError) AllErrors() []error { return m }

// AddOrUpdateProductParamValidationError is the validation error returned by
// AddOrUpdateProductParam.Validate if the designated constraints aren't met.
type AddOrUpdateProductParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateProductParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateProductParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateProductParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateProductParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateProductParamValidationError) ErrorName() string {
	return "AddOrUpdateProductParamValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateProductParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateProductParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateProductParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateProductParamValidationError{}

// Validate checks the field values on GetProductsParam with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProductsParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductsParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductsParamMultiError, or nil if none found.
func (m *GetProductsParam) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductsParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNum() < 0 {
		err := GetProductsParamValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := GetProductsParamValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductsParamMultiError(errors)
	}

	return nil
}

// GetProductsParamMultiError is an error wrapping multiple validation errors
// returned by GetProductsParam.ValidateAll() if the designated constraints
// aren't met.
type GetProductsParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductsParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductsParamMultiError) AllErrors() []error { return m }

// GetProductsParamValidationError is the validation error returned by
// GetProductsParam.Validate if the designated constraints aren't met.
type GetProductsParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductsParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductsParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductsParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductsParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductsParamValidationError) ErrorName() string { return "GetProductsParamValidationError" }

// Error satisfies the builtin error interface
func (e GetProductsParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductsParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductsParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductsParamValidationError{}

// Validate checks the field values on ProductsData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductsData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductsDataMultiError, or
// nil if none found.
func (m *ProductsData) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductsDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductsDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductsDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageTotal

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return ProductsDataMultiError(errors)
	}

	return nil
}

// ProductsDataMultiError is an error wrapping multiple validation errors
// returned by ProductsData.ValidateAll() if the designated constraints aren't met.
type ProductsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductsDataMultiError) AllErrors() []error { return m }

// ProductsDataValidationError is the validation error returned by
// ProductsData.Validate if the designated constraints aren't met.
type ProductsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsDataValidationError) ErrorName() string { return "ProductsDataValidationError" }

// Error satisfies the builtin error interface
func (e ProductsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsDataValidationError{}

// Validate checks the field values on GetProductsRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetProductsRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductsRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetProductsRspMultiError,
// or nil if none found.
func (m *GetProductsRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductsRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductsRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductsRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductsRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductsRspMultiError(errors)
	}

	return nil
}

// GetProductsRspMultiError is an error wrapping multiple validation errors
// returned by GetProductsRsp.ValidateAll() if the designated constraints
// aren't met.
type GetProductsRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductsRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductsRspMultiError) AllErrors() []error { return m }

// GetProductsRspValidationError is the validation error returned by
// GetProductsRsp.Validate if the designated constraints aren't met.
type GetProductsRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductsRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductsRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductsRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductsRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductsRspValidationError) ErrorName() string { return "GetProductsRspValidationError" }

// Error satisfies the builtin error interface
func (e GetProductsRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductsRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductsRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductsRspValidationError{}

// Validate checks the field values on GetProductReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetProductReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetProductReqMultiError, or
// nil if none found.
func (m *GetProductReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProductReqMultiError(errors)
	}

	return nil
}

// GetProductReqMultiError is an error wrapping multiple validation errors
// returned by GetProductReq.ValidateAll() if the designated constraints
// aren't met.
type GetProductReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductReqMultiError) AllErrors() []error { return m }

// GetProductReqValidationError is the validation error returned by
// GetProductReq.Validate if the designated constraints aren't met.
type GetProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductReqValidationError) ErrorName() string { return "GetProductReqValidationError" }

// Error satisfies the builtin error interface
func (e GetProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductReqValidationError{}

// Validate checks the field values on GetProductRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetProductRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetProductRspMultiError, or
// nil if none found.
func (m *GetProductRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductRspMultiError(errors)
	}

	return nil
}

// GetProductRspMultiError is an error wrapping multiple validation errors
// returned by GetProductRsp.ValidateAll() if the designated constraints
// aren't met.
type GetProductRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductRspMultiError) AllErrors() []error { return m }

// GetProductRspValidationError is the validation error returned by
// GetProductRsp.Validate if the designated constraints aren't met.
type GetProductRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductRspValidationError) ErrorName() string { return "GetProductRspValidationError" }

// Error satisfies the builtin error interface
func (e GetProductRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductRspValidationError{}

// Validate checks the field values on DeleteProductReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductReqMultiError, or nil if none found.
func (m *DeleteProductReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProductReqMultiError(errors)
	}

	return nil
}

// DeleteProductReqMultiError is an error wrapping multiple validation errors
// returned by DeleteProductReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteProductReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductReqMultiError) AllErrors() []error { return m }

// DeleteProductReqValidationError is the validation error returned by
// DeleteProductReq.Validate if the designated constraints aren't met.
type DeleteProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductReqValidationError) ErrorName() string { return "DeleteProductReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductReqValidationError{}
