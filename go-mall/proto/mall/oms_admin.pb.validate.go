// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/oms_admin.proto

package mall

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddOrUpdateOrderReturnReasonParam with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddOrUpdateOrderReturnReasonParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateOrderReturnReasonParam
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddOrUpdateOrderReturnReasonParamMultiError, or nil if none found.
func (m *AddOrUpdateOrderReturnReasonParam) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateOrderReturnReasonParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddOrUpdateOrderReturnReasonParamValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() < 0 {
		err := AddOrUpdateOrderReturnReasonParamValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return AddOrUpdateOrderReturnReasonParamMultiError(errors)
	}

	return nil
}

// AddOrUpdateOrderReturnReasonParamMultiError is an error wrapping multiple
// validation errors returned by
// AddOrUpdateOrderReturnReasonParam.ValidateAll() if the designated
// constraints aren't met.
type AddOrUpdateOrderReturnReasonParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateOrderReturnReasonParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateOrderReturnReasonParamMultiError) AllErrors() []error { return m }

// AddOrUpdateOrderReturnReasonParamValidationError is the validation error
// returned by AddOrUpdateOrderReturnReasonParam.Validate if the designated
// constraints aren't met.
type AddOrUpdateOrderReturnReasonParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateOrderReturnReasonParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateOrderReturnReasonParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateOrderReturnReasonParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateOrderReturnReasonParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateOrderReturnReasonParamValidationError) ErrorName() string {
	return "AddOrUpdateOrderReturnReasonParamValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateOrderReturnReasonParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateOrderReturnReasonParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateOrderReturnReasonParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateOrderReturnReasonParamValidationError{}

// Validate checks the field values on GetOrderReturnReasonsParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnReasonsParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnReasonsParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnReasonsParamMultiError, or nil if none found.
func (m *GetOrderReturnReasonsParam) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnReasonsParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderReturnReasonsParamValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderReturnReasonsParamValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderReturnReasonsParamValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageNum() < 0 {
		err := GetOrderReturnReasonsParamValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := GetOrderReturnReasonsParamValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrderReturnReasonsParamMultiError(errors)
	}

	return nil
}

// GetOrderReturnReasonsParamMultiError is an error wrapping multiple
// validation errors returned by GetOrderReturnReasonsParam.ValidateAll() if
// the designated constraints aren't met.
type GetOrderReturnReasonsParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnReasonsParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnReasonsParamMultiError) AllErrors() []error { return m }

// GetOrderReturnReasonsParamValidationError is the validation error returned
// by GetOrderReturnReasonsParam.Validate if the designated constraints aren't met.
type GetOrderReturnReasonsParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnReasonsParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnReasonsParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnReasonsParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnReasonsParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnReasonsParamValidationError) ErrorName() string {
	return "GetOrderReturnReasonsParamValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnReasonsParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnReasonsParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnReasonsParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnReasonsParamValidationError{}

// Validate checks the field values on OrderReturnReasonsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderReturnReasonsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderReturnReasonsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderReturnReasonsDataMultiError, or nil if none found.
func (m *OrderReturnReasonsData) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderReturnReasonsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderReturnReasonsDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderReturnReasonsDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderReturnReasonsDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageTotal

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return OrderReturnReasonsDataMultiError(errors)
	}

	return nil
}

// OrderReturnReasonsDataMultiError is an error wrapping multiple validation
// errors returned by OrderReturnReasonsData.ValidateAll() if the designated
// constraints aren't met.
type OrderReturnReasonsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderReturnReasonsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderReturnReasonsDataMultiError) AllErrors() []error { return m }

// OrderReturnReasonsDataValidationError is the validation error returned by
// OrderReturnReasonsData.Validate if the designated constraints aren't met.
type OrderReturnReasonsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderReturnReasonsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderReturnReasonsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderReturnReasonsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderReturnReasonsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderReturnReasonsDataValidationError) ErrorName() string {
	return "OrderReturnReasonsDataValidationError"
}

// Error satisfies the builtin error interface
func (e OrderReturnReasonsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderReturnReasonsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderReturnReasonsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderReturnReasonsDataValidationError{}

// Validate checks the field values on GetOrderReturnReasonsRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnReasonsRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnReasonsRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnReasonsRspMultiError, or nil if none found.
func (m *GetOrderReturnReasonsRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnReasonsRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderReturnReasonsRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderReturnReasonsRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderReturnReasonsRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderReturnReasonsRspMultiError(errors)
	}

	return nil
}

// GetOrderReturnReasonsRspMultiError is an error wrapping multiple validation
// errors returned by GetOrderReturnReasonsRsp.ValidateAll() if the designated
// constraints aren't met.
type GetOrderReturnReasonsRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnReasonsRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnReasonsRspMultiError) AllErrors() []error { return m }

// GetOrderReturnReasonsRspValidationError is the validation error returned by
// GetOrderReturnReasonsRsp.Validate if the designated constraints aren't met.
type GetOrderReturnReasonsRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnReasonsRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnReasonsRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnReasonsRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnReasonsRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnReasonsRspValidationError) ErrorName() string {
	return "GetOrderReturnReasonsRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnReasonsRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnReasonsRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnReasonsRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnReasonsRspValidationError{}

// Validate checks the field values on GetOrderReturnReasonReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnReasonReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnReasonReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnReasonReqMultiError, or nil if none found.
func (m *GetOrderReturnReasonReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnReasonReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOrderReturnReasonReqMultiError(errors)
	}

	return nil
}

// GetOrderReturnReasonReqMultiError is an error wrapping multiple validation
// errors returned by GetOrderReturnReasonReq.ValidateAll() if the designated
// constraints aren't met.
type GetOrderReturnReasonReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnReasonReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnReasonReqMultiError) AllErrors() []error { return m }

// GetOrderReturnReasonReqValidationError is the validation error returned by
// GetOrderReturnReasonReq.Validate if the designated constraints aren't met.
type GetOrderReturnReasonReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnReasonReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnReasonReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnReasonReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnReasonReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnReasonReqValidationError) ErrorName() string {
	return "GetOrderReturnReasonReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnReasonReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnReasonReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnReasonReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnReasonReqValidationError{}

// Validate checks the field values on GetOrderReturnReasonRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnReasonRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnReasonRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnReasonRspMultiError, or nil if none found.
func (m *GetOrderReturnReasonRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnReasonRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderReturnReasonRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderReturnReasonRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderReturnReasonRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderReturnReasonRspMultiError(errors)
	}

	return nil
}

// GetOrderReturnReasonRspMultiError is an error wrapping multiple validation
// errors returned by GetOrderReturnReasonRsp.ValidateAll() if the designated
// constraints aren't met.
type GetOrderReturnReasonRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnReasonRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnReasonRspMultiError) AllErrors() []error { return m }

// GetOrderReturnReasonRspValidationError is the validation error returned by
// GetOrderReturnReasonRsp.Validate if the designated constraints aren't met.
type GetOrderReturnReasonRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnReasonRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnReasonRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnReasonRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnReasonRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnReasonRspValidationError) ErrorName() string {
	return "GetOrderReturnReasonRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnReasonRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnReasonRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnReasonRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnReasonRspValidationError{}

// Validate checks the field values on DeleteOrderReturnReasonReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrderReturnReasonReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrderReturnReasonReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrderReturnReasonReqMultiError, or nil if none found.
func (m *DeleteOrderReturnReasonReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrderReturnReasonReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteOrderReturnReasonReqMultiError(errors)
	}

	return nil
}

// DeleteOrderReturnReasonReqMultiError is an error wrapping multiple
// validation errors returned by DeleteOrderReturnReasonReq.ValidateAll() if
// the designated constraints aren't met.
type DeleteOrderReturnReasonReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrderReturnReasonReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrderReturnReasonReqMultiError) AllErrors() []error { return m }

// DeleteOrderReturnReasonReqValidationError is the validation error returned
// by DeleteOrderReturnReasonReq.Validate if the designated constraints aren't met.
type DeleteOrderReturnReasonReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrderReturnReasonReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrderReturnReasonReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrderReturnReasonReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrderReturnReasonReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrderReturnReasonReqValidationError) ErrorName() string {
	return "DeleteOrderReturnReasonReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrderReturnReasonReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrderReturnReasonReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrderReturnReasonReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrderReturnReasonReqValidationError{}
